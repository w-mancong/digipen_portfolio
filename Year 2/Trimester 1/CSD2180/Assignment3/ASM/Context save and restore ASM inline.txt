//context saving    
	asm volatile
    (
      "movq %%rbx, %0 \n"
      "movq %%rdi, %1 \n"
      "movq %%rsi, %2 \n"
      "movq %%r12, %3 \n"
      "movq %%r13, %4 \n"
      "movq %%r14, %5 \n"
      "movq %%r15, %6 \n"
	  : "=m" (currThrd->gregs[REG_RBX]),
	    "=m" (currThrd->gregs[REG_RDI]), 
	    "=m" (currThrd->gregs[REG_RSI]), 	  
	    "=m" (currThrd->gregs[REG_R12]), 
	    "=m" (currThrd->gregs[REG_R13]),
	    "=m" (currThrd->gregs[REG_R14]),
	    "=m" (currThrd->gregs[REG_R15])
	);

    asm volatile
    (
      "movq %%rax, %0 \n"
  	  "movq %%rdx, %1 \n"
      "movq %%rcx, %2 \n"
      "movq %%r8, %3 \n"
      "movq %%r9, %4 \n"
      "movq %%r10, %5 \n"
      "movq %%r11, %6 \n"	  
	  : "=m" (currThrd->gregs[REG_RAX]),
	    "=m" (currThrd->gregs[REG_RDX]),
	    "=m" (currThrd->gregs[REG_RCX]),
	    "=m" (currThrd->gregs[REG_R8]),
	    "=m" (currThrd->gregs[REG_R9]),
	    "=m" (currThrd->gregs[REG_R10]),
	    "=m" (currThrd->gregs[REG_R11])
		);	
	
	// switch stack
    asm volatile
    (
      "movq %%rsp, %0 \n"
      "movq %%rbp, %1 \n"	
	  : "=m" (currThrd->gregs[REG_RSP]),
	    "=m" (currThrd->gregs[REG_RBP])	  
	);	
    asm volatile
    (
	  "pushfq \n"
      "popq %0 \n"
	  : "=m" (currThrd->gregs[REG_EFL])
	  : 
	  : "rsp"
	);	

//context restoring

      asm volatile
      (
	    "pushq %0 \n"
	    "popfq \n\t"	
	    : 
	    : "m" (currThrd->gregs[REG_EFL])
	    : "cc","rsp"
	  ); 
	  
	// switch stack
    asm volatile
    (
      "movq %0,  %%rsp \n"
      "movq %1,  %%rbp\n"
		:	  
	  : "m" (currThrd->gregs[REG_RSP]),
	    "m" (currThrd->gregs[REG_RBP])	  
	);  

	  
  	asm volatile
    (
      "movq %0, %%rbx\n"		
      "movq %1, %%rdi \n"
      "movq %2, %%rsi \n"
      "movq %3, %%r12 \n"
      "movq %4, %%r13 \n"  
      "movq %5, %%r14 \n"
      "movq %6, %%r15 \n"
	  : 	    
	  : "m" (currThrd->gregs[REG_RBX]),
		"m" (currThrd->gregs[REG_RDI]),
		"m" (currThrd->gregs[REG_RSI]),
		"m" (currThrd->gregs[REG_R12]),
		"m" (currThrd->gregs[REG_R13]),
		"m" (currThrd->gregs[REG_R14]),
  		"m" (currThrd->gregs[REG_R15])
	); 
  	asm volatile
    (
      "movq %0, %%rax \n"		
      "movq %1, %%rcx \n"
      "movq %2, %%rdx \n"
      "movq %3, %%r8 \n"
      "movq %4, %%r9 \n"  
      "movq %5, %%r10 \n"
      "movq %6, %%r11 \n"
	  : 	    
	  : "m" (currThrd->gregs[REG_RAX]),
		"m" (currThrd->gregs[REG_RCX]),
		"m" (currThrd->gregs[REG_RDX]),
		"m" (currThrd->gregs[REG_R8]),
		"m" (currThrd->gregs[REG_R9]),
		"m" (currThrd->gregs[REG_R10]),
  		"m" (currThrd->gregs[REG_R11])
	);